// Author: Michael Doyle
// Date: 1/28/18
// RocketAnalyticsPlayerStatParser.cpp

#include <map>
#include <string>
#include <iostream>
#include <fstream>
#include <experimental/filesystem>
#include "ReplayFile.hpp"
#include "Property.hpp"
#include "Player.hpp"

using namespace PlayerStatParser;
using namespace ReplayParser;

using std::vector;
using std::string;
using std::cout;
using std::cin;
using std::cerr;
using std::endl;
using std::map;
using std::pair;
using std::ofstream;

namespace filesystem = std::experimental::filesystem::v1;

int main() {
	const string VERSION = "1.0";
	const string DEFAULT_FILE_NAME = "player_stats";
	const string FILE_EXTENSION = ".csv";
	map<string, Player> players;
	string replay_dir;
	string dest_dir;

	cout << "*************************************************\n" <<
			"******** RocketAnalyticsPlayerStatParser ********\n" <<
			"******** Author: Michael  Doyle (MimiKe) ********\n" <<
			"****************** Version " << VERSION << " ******************\n" <<
			"*************************************************\n" << endl;

	cout << "Please enter the directory path of the replay files:" << endl;
	cin >> replay_dir;

	if (!filesystem::is_directory(replay_dir)) {
		cerr << "\nInvalid replay directory path! Program Terminating!" << endl;
		exit(EXIT_FAILURE);
	}

	cout << endl;

	cout << "Please enter the destination directory path:" << endl;
	cin >> dest_dir;

	if (!filesystem::is_directory(replay_dir)) {
		cerr << "Invalid output directory path! Program Terminating!\n" << endl;
		cin.get();
	}

	// Don't try to understand this unless you understand how
	// RocketAnalyticsLib stores player stats in ReplayFile objects.
	//
	// Iterates through each file in the replay directory and parses the
	// replay header information. Then, it takes the PlayerStats property
	// and stores each player into a map. If the player already exists, the
	// stats are added together adn stored.
	for (filesystem::path path : filesystem::directory_iterator(replay_dir)) {
		string replay_path = path.u8string();
		cout << "Parsing " << replay_path << endl;
		ReplayFile replay(replay_path);
		vector<Property> replay_properties = replay.get_header().get_properties();

		for (Property prop : replay_properties) {
			if (prop.get_name() == "PlayerStats") {
				vector<vector<Property>> player_stats =
					prop.get_value().property_value.list;
				for (vector<vector<Property>>::iterator player =
					player_stats.begin();
					player != player_stats.end(); player++) {
					Player temp_player;
					temp_player.name = player->at(0).get_value_as_string();
					temp_player.platform = player->at(1).get_value_as_string();
					temp_player.onlineID= player->at(2).get_value_as_string();
					temp_player.team = stoi(player->at(3).get_value_as_string());
					temp_player.score = stoi(player->at(4).get_value_as_string());
					temp_player.goals = stoi(player->at(5).get_value_as_string());
					temp_player.assists = stoi(player->at(6).get_value_as_string());
					temp_player.saves = stoi(player->at(7).get_value_as_string());
					temp_player.shots = stoi(player->at(8).get_value_as_string());
					temp_player.games = 1;
					if (players.count(temp_player.onlineID)) {
						players[temp_player.onlineID].score += temp_player.score;
						players[temp_player.onlineID].goals += temp_player.goals;
						players[temp_player.onlineID].assists += temp_player.assists;
						players[temp_player.onlineID].saves += temp_player.saves;
						players[temp_player.onlineID].shots += temp_player.shots;
						players[temp_player.onlineID].games += temp_player.games;
					} else {
						players[temp_player.onlineID] = temp_player;
					}
				}
			}
		}

	}

	cout << endl;

	string output_file_name;
	cout << "Please enter the output filename:" << endl;
	cin >> output_file_name;

	string output_filepath = dest_dir + "\\" + output_file_name;

	if (!filesystem::is_directory(output_filepath)) {
		output_filepath = dest_dir + "\\" + DEFAULT_FILE_NAME;
	}

	ofstream output_file;
	output_file.open(output_filepath);
	output_file << "Player Stats generated by RocketAnalyticsPlayerStatsParser.\n";
	output_file << "Count,Team,Name,Platform,Steam64,Games Played,Score,Goals,Assists,Saves,Shots\n";
	int count = 1;
	for (auto const&[player_id, player] : players) {
		cout << "Adding player " << player.name <<
			" (" << player.onlineID << ") to csv file" << endl;
		output_file << count << ",," <<
			player.name << "," <<
			player.platform << "," <<
			player.onlineID << "," <<
			player.games << "," <<
			player.score << "," <<
			player.goals << "," <<
			player.assists << "," <<
			player.saves << "," <<
			player.shots << "\n";
		count++;
	}
	output_file.close();
	return 0;
}
